From 9a39fc880563b46cdf1bba11bbb042ee9065b15a Mon Sep 17 00:00:00 2001
From: Michael S. Tsirkin <mst@redhat.com>
Date: Wed, 7 Apr 2010 14:25:13 -0300
Subject: [PATCH 06/12] virtio: API name cleanup

RH-Author: Michael S. Tsirkin <mst@redhat.com>
Message-id: <9bd41238f54364115c1c53b00fb29934ef360e68.1270649651.git.mst@redhat.com>
Patchwork-id: 8425
O-Subject: [PATCH RHEL6.0 3/9] virtio: API name cleanup
Bugzilla: 580109
RH-Acked-by: Gerd Hoffmann <kraxel@redhat.com>
RH-Acked-by: Juan Quintela <quintela@redhat.com>
RH-Acked-by: Amit Shah <amit.shah@redhat.com>

upstream has cleaner names for vq accessors used by vhost:
with _set _get and _addr suffixes making clear what
happens.

Cherry picked from commit 1cbdabe203164433fbbec3a1815d8be42a085c88.

Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
---
 hw/vhost.c      |   30 +++++++++++++++---------------
 hw/virtio-pci.c |   20 ++++++++++----------
 hw/virtio.c     |   17 ++++++++---------
 hw/virtio.h     |   20 ++++++++++----------
 4 files changed, 43 insertions(+), 44 deletions(-)

Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
---
 hw/vhost.c      |   30 +++++++++++++++---------------
 hw/virtio-pci.c |   20 ++++++++++----------
 hw/virtio.c     |   17 ++++++++---------
 hw/virtio.h     |   20 ++++++++++----------
 4 files changed, 43 insertions(+), 44 deletions(-)

diff --git a/hw/vhost.c b/hw/vhost.c
index 12a5757..ddb85ba 100644
--- a/hw/vhost.c
+++ b/hw/vhost.c
@@ -454,7 +454,7 @@ static int vhost_virtqueue_init(struct vhost_dev *dev,
     struct vhost_vring_state state = {
         .index = idx,
     };
-    struct VirtQueue *q = virtio_queue(vdev, idx);
+    struct VirtQueue *q = virtio_get_queue(vdev, idx);
 
     vq->num = state.num = virtio_queue_get_num(vdev, idx);
     r = ioctl(dev->control, VHOST_SET_VRING_NUM, &state);
@@ -462,28 +462,28 @@ static int vhost_virtqueue_init(struct vhost_dev *dev,
         return -errno;
     }
 
-    state.num = virtio_queue_last_avail_idx(vdev, idx);
+    state.num = virtio_queue_get_last_avail_idx(vdev, idx);
     r = ioctl(dev->control, VHOST_SET_VRING_BASE, &state);
     if (r) {
         return -errno;
     }
 
     s = l = virtio_queue_get_desc_size(vdev, idx);
-    a = virtio_queue_get_desc(vdev, idx);
+    a = virtio_queue_get_desc_addr(vdev, idx);
     vq->desc = cpu_physical_memory_map(a, &l, 0);
     if (!vq->desc || l != s) {
         r = -ENOMEM;
         goto fail_alloc_desc;
     }
     s = l = virtio_queue_get_avail_size(vdev, idx);
-    a = virtio_queue_get_avail(vdev, idx);
+    a = virtio_queue_get_avail_addr(vdev, idx);
     vq->avail = cpu_physical_memory_map(a, &l, 0);
     if (!vq->avail || l != s) {
         r = -ENOMEM;
         goto fail_alloc_avail;
     }
     vq->used_size = s = l = virtio_queue_get_used_size(vdev, idx);
-    vq->used_phys = a = virtio_queue_get_used(vdev, idx);
+    vq->used_phys = a = virtio_queue_get_used_addr(vdev, idx);
     vq->used = cpu_physical_memory_map(a, &l, 1);
     if (!vq->used || l != s) {
         r = -ENOMEM;
@@ -491,7 +491,7 @@ static int vhost_virtqueue_init(struct vhost_dev *dev,
     }
 
     vq->ring_size = s = l = virtio_queue_get_ring_size(vdev, idx);
-    vq->ring_phys = a = virtio_queue_get_ring(vdev, idx);
+    vq->ring_phys = a = virtio_queue_get_ring_addr(vdev, idx);
     vq->ring = cpu_physical_memory_map(a, &l, 1);
     if (!vq->ring || l != s) {
         r = -ENOMEM;
@@ -503,30 +503,30 @@ static int vhost_virtqueue_init(struct vhost_dev *dev,
         r = -errno;
         goto fail_alloc;
     }
-    if (!vdev->binding->guest_notifier || !vdev->binding->host_notifier) {
+    if (!vdev->binding->set_guest_notifier || !vdev->binding->set_host_notifier) {
         fprintf(stderr, "binding does not support irqfd/queuefd\n");
         r = -ENOSYS;
         goto fail_alloc;
     }
-    r = vdev->binding->guest_notifier(vdev->binding_opaque, idx, true);
+    r = vdev->binding->set_guest_notifier(vdev->binding_opaque, idx, true);
     if (r < 0) {
         fprintf(stderr, "Error binding guest notifier: %d\n", -r);
         goto fail_guest_notifier;
     }
 
-    r = vdev->binding->host_notifier(vdev->binding_opaque, idx, true);
+    r = vdev->binding->set_host_notifier(vdev->binding_opaque, idx, true);
     if (r < 0) {
         fprintf(stderr, "Error binding host notifier: %d\n", -r);
         goto fail_host_notifier;
     }
 
-    file.fd = event_notifier_get_fd(virtio_queue_host_notifier(q));
+    file.fd = event_notifier_get_fd(virtio_queue_get_host_notifier(q));
     r = ioctl(dev->control, VHOST_SET_VRING_KICK, &file);
     if (r) {
         goto fail_kick;
     }
 
-    file.fd = event_notifier_get_fd(virtio_queue_guest_notifier(q));
+    file.fd = event_notifier_get_fd(virtio_queue_get_guest_notifier(q));
     r = ioctl(dev->control, VHOST_SET_VRING_CALL, &file);
     if (r) {
         goto fail_call;
@@ -536,9 +536,9 @@ static int vhost_virtqueue_init(struct vhost_dev *dev,
 
 fail_call:
 fail_kick:
-    vdev->binding->host_notifier(vdev->binding_opaque, idx, false);
+    vdev->binding->set_host_notifier(vdev->binding_opaque, idx, false);
 fail_host_notifier:
-    vdev->binding->guest_notifier(vdev->binding_opaque, idx, false);
+    vdev->binding->set_guest_notifier(vdev->binding_opaque, idx, false);
 fail_guest_notifier:
 fail_alloc:
     cpu_physical_memory_unmap(vq->ring, virtio_queue_get_ring_size(vdev, idx),
@@ -565,14 +565,14 @@ static void vhost_virtqueue_cleanup(struct vhost_dev *dev,
         .index = idx,
     };
     int r;
-    r = vdev->binding->guest_notifier(vdev->binding_opaque, idx, false);
+    r = vdev->binding->set_guest_notifier(vdev->binding_opaque, idx, false);
     if (r < 0) {
         fprintf(stderr, "vhost VQ %d guest cleanup failed: %d\n", idx, r);
         fflush(stderr);
     }
     assert (r >= 0);
 
-    r = vdev->binding->host_notifier(vdev->binding_opaque, idx, false);
+    r = vdev->binding->set_host_notifier(vdev->binding_opaque, idx, false);
     if (r < 0) {
         fprintf(stderr, "vhost VQ %d host cleanup failed: %d\n", idx, r);
         fflush(stderr);
diff --git a/hw/virtio-pci.c b/hw/virtio-pci.c
index efe507a..f557caf 100644
--- a/hw/virtio-pci.c
+++ b/hw/virtio-pci.c
@@ -396,7 +396,7 @@ static unsigned virtio_pci_get_features(void *opaque)
 static void virtio_pci_guest_notifier_read(void *opaque)
 {
     VirtQueue *vq = opaque;
-    EventNotifier *n = virtio_queue_guest_notifier(vq);
+    EventNotifier *n = virtio_queue_get_guest_notifier(vq);
     if (event_notifier_test_and_clear(n)) {
         virtio_irq(vq);
     }
@@ -406,7 +406,7 @@ static int virtio_pci_mask_notifier(PCIDevice *dev, unsigned vector,
                                     void *opaque, int masked)
 {
     VirtQueue *vq = opaque;
-    EventNotifier *notifier = virtio_queue_guest_notifier(vq);
+    EventNotifier *notifier = virtio_queue_get_guest_notifier(vq);
     int r = kvm_set_irqfd(dev->msix_irq_entries[vector].gsi,
                           event_notifier_get_fd(notifier),
                           !masked);
@@ -423,11 +423,11 @@ static int virtio_pci_mask_notifier(PCIDevice *dev, unsigned vector,
     return 0;
 }
 
-static int virtio_pci_guest_notifier(void *opaque, int n, bool assign)
+static int virtio_pci_set_guest_notifier(void *opaque, int n, bool assign)
 {
     VirtIOPCIProxy *proxy = opaque;
-    VirtQueue *vq = virtio_queue(proxy->vdev, n);
-    EventNotifier *notifier = virtio_queue_guest_notifier(vq);
+    VirtQueue *vq = virtio_get_queue(proxy->vdev, n);
+    EventNotifier *notifier = virtio_queue_get_guest_notifier(vq);
 
     if (assign) {
         int r = event_notifier_init(notifier, 0);
@@ -448,11 +448,11 @@ static int virtio_pci_guest_notifier(void *opaque, int n, bool assign)
     return 0;
 }
 
-static int virtio_pci_host_notifier(void *opaque, int n, bool assign)
+static int virtio_pci_set_host_notifier(void *opaque, int n, bool assign)
 {
     VirtIOPCIProxy *proxy = opaque;
-    VirtQueue *vq = virtio_queue(proxy->vdev, n);
-    EventNotifier *notifier = virtio_queue_host_notifier(vq);
+    VirtQueue *vq = virtio_get_queue(proxy->vdev, n);
+    EventNotifier *notifier = virtio_queue_get_host_notifier(vq);
     int r;
     if (assign) {
         r = event_notifier_init(notifier, 1);
@@ -484,8 +484,8 @@ static const VirtIOBindings virtio_pci_bindings = {
     .save_queue = virtio_pci_save_queue,
     .load_queue = virtio_pci_load_queue,
     .get_features = virtio_pci_get_features,
-    .host_notifier = virtio_pci_host_notifier,
-    .guest_notifier = virtio_pci_guest_notifier,
+    .set_host_notifier = virtio_pci_set_host_notifier,
+    .set_guest_notifier = virtio_pci_set_guest_notifier,
 };
 
 static void virtio_init_pci(VirtIOPCIProxy *proxy, VirtIODevice *vdev,
diff --git a/hw/virtio.c b/hw/virtio.c
index e5787fa..f54129f 100644
--- a/hw/virtio.c
+++ b/hw/virtio.c
@@ -745,22 +745,22 @@ void virtio_bind_device(VirtIODevice *vdev, const VirtIOBindings *binding,
     vdev->binding_opaque = opaque;
 }
 
-target_phys_addr_t virtio_queue_get_desc(VirtIODevice *vdev, int n)
+target_phys_addr_t virtio_queue_get_desc_addr(VirtIODevice *vdev, int n)
 {
     return vdev->vq[n].vring.desc;
 }
 
-target_phys_addr_t virtio_queue_get_avail(VirtIODevice *vdev, int n)
+target_phys_addr_t virtio_queue_get_avail_addr(VirtIODevice *vdev, int n)
 {
     return vdev->vq[n].vring.avail;
 }
 
-target_phys_addr_t virtio_queue_get_used(VirtIODevice *vdev, int n)
+target_phys_addr_t virtio_queue_get_used_addr(VirtIODevice *vdev, int n)
 {
     return vdev->vq[n].vring.used;
 }
 
-target_phys_addr_t virtio_queue_get_ring(VirtIODevice *vdev, int n)
+target_phys_addr_t virtio_queue_get_ring_addr(VirtIODevice *vdev, int n)
 {
     return vdev->vq[n].vring.desc;
 }
@@ -782,14 +782,13 @@ target_phys_addr_t virtio_queue_get_used_size(VirtIODevice *vdev, int n)
         sizeof(VRingUsedElem) * vdev->vq[n].vring.num;
 }
 
-
 target_phys_addr_t virtio_queue_get_ring_size(VirtIODevice *vdev, int n)
 {
     return vdev->vq[n].vring.used - vdev->vq[n].vring.desc +
 	    virtio_queue_get_used_size(vdev, n);
 }
 
-uint16_t virtio_queue_last_avail_idx(VirtIODevice *vdev, int n)
+uint16_t virtio_queue_get_last_avail_idx(VirtIODevice *vdev, int n)
 {
     return vdev->vq[n].last_avail_idx;
 }
@@ -799,16 +798,16 @@ void virtio_queue_set_last_avail_idx(VirtIODevice *vdev, int n, uint16_t idx)
     vdev->vq[n].last_avail_idx = idx;
 }
 
-VirtQueue *virtio_queue(VirtIODevice *vdev, int n)
+VirtQueue *virtio_get_queue(VirtIODevice *vdev, int n)
 {
     return vdev->vq + n;
 }
 
-EventNotifier *virtio_queue_guest_notifier(VirtQueue *vq)
+EventNotifier *virtio_queue_get_guest_notifier(VirtQueue *vq)
 {
     return &vq->guest_notifier;
 }
-EventNotifier *virtio_queue_host_notifier(VirtQueue *vq)
+EventNotifier *virtio_queue_get_host_notifier(VirtQueue *vq)
 {
     return &vq->host_notifier;
 }
diff --git a/hw/virtio.h b/hw/virtio.h
index 066eee3..f885f1b 100644
--- a/hw/virtio.h
+++ b/hw/virtio.h
@@ -89,8 +89,8 @@ typedef struct {
     int (*load_config)(void * opaque, QEMUFile *f);
     int (*load_queue)(void * opaque, int n, QEMUFile *f);
     unsigned (*get_features)(void * opaque);
-    int (*guest_notifier)(void * opaque, int n, bool assigned);
-    int (*host_notifier)(void * opaque, int n, bool assigned);
+    int (*set_guest_notifier)(void * opaque, int n, bool assigned);
+    int (*set_host_notifier)(void * opaque, int n, bool assigned);
 } VirtIOBindings;
 
 #define VIRTIO_PCI_QUEUE_MAX 64
@@ -192,18 +192,18 @@ void virtio_net_exit(VirtIODevice *vdev);
 	DEFINE_PROP_BIT("indirect_desc", _state, _field, \
 			VIRTIO_RING_F_INDIRECT_DESC, true)
 
-target_phys_addr_t virtio_queue_get_desc(VirtIODevice *vdev, int n);
-target_phys_addr_t virtio_queue_get_avail(VirtIODevice *vdev, int n);
-target_phys_addr_t virtio_queue_get_used(VirtIODevice *vdev, int n);
-target_phys_addr_t virtio_queue_get_ring(VirtIODevice *vdev, int n);
+target_phys_addr_t virtio_queue_get_desc_addr(VirtIODevice *vdev, int n);
+target_phys_addr_t virtio_queue_get_avail_addr(VirtIODevice *vdev, int n);
+target_phys_addr_t virtio_queue_get_used_addr(VirtIODevice *vdev, int n);
+target_phys_addr_t virtio_queue_get_ring_addr(VirtIODevice *vdev, int n);
 target_phys_addr_t virtio_queue_get_desc_size(VirtIODevice *vdev, int n);
 target_phys_addr_t virtio_queue_get_avail_size(VirtIODevice *vdev, int n);
 target_phys_addr_t virtio_queue_get_used_size(VirtIODevice *vdev, int n);
 target_phys_addr_t virtio_queue_get_ring_size(VirtIODevice *vdev, int n);
-uint16_t virtio_queue_last_avail_idx(VirtIODevice *vdev, int n);
+uint16_t virtio_queue_get_last_avail_idx(VirtIODevice *vdev, int n);
 void virtio_queue_set_last_avail_idx(VirtIODevice *vdev, int n, uint16_t idx);
-VirtQueue *virtio_queue(VirtIODevice *vdev, int n);
-EventNotifier *virtio_queue_guest_notifier(VirtQueue *vq);
-EventNotifier *virtio_queue_host_notifier(VirtQueue *vq);
+VirtQueue *virtio_get_queue(VirtIODevice *vdev, int n);
+EventNotifier *virtio_queue_get_guest_notifier(VirtQueue *vq);
+EventNotifier *virtio_queue_get_host_notifier(VirtQueue *vq);
 void virtio_irq(VirtQueue *vq);
 #endif
-- 
1.7.0.3

